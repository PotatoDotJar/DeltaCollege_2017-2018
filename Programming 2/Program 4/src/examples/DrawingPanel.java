package examples;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.Random;

/**
 * Delta College - CST 283 - Klingler 
 * This class manages a panel dedicated for drawing.   It receives an integer
 * index indicating the same to be drawn: a rectangle, a filled rectangle, a
 * circle, or a filled circle.  It then interprets a mouse click and draws the
 * shape centered on the click.   The color of the shape is randomly determined.
 */
import javax.swing.JPanel;
import javax.swing.JRadioButton;

public class DrawingPanel extends JPanel implements MouseListener {
	private int currentShapeIndex; // Index of current shape choice
	private int currX, currY; // Coordinates of most recent mouse click
	private Random randomNumMgr; // Random number generator

	// Constant values for the shapes to be drawn
	private final int RECT_WIDTH = 80;
	private final int RECT_HEIGHT = 50;
	private final int CIRCLE_RADIUS = 40;

	// Constructor
	public DrawingPanel(JRadioButton[] buttonArray) {
		// Set the background color to white. Instantiate random number generator.
		setBackground(Color.white);
		randomNumMgr = new Random();

		// Set the preferred size of the panel
		setPreferredSize(new Dimension(300, 200));

		// Since this class implements the MouseListener interface, it must
		// implement the mandatory methods required by the interface. It also
		// must listen for an event generated by the panel itself: ("this").
		addMouseListener(this);

		currentShapeIndex = -1; // Set initial default shape to effecively "none"
	}

	// A "set" method to receive the choice for the current shape from the driver
	// class.
	public void setShapeIndex(int shapeIndex) {
		currentShapeIndex = shapeIndex;
	}

	// PaintComponent method to define drawing for each "repaint" action. Method
	// will define and set a random color. Then, it will determine the shape
	// and dimensions to be drawn based on the current selected index. The
	// shape will be centered on the mouse click.
	public void paintComponent(Graphics g) {
		// Call the superclass paintComponent method.
		super.paintComponent(g);

		float red = randomNumMgr.nextFloat();
		float green = randomNumMgr.nextFloat();
		float blue = randomNumMgr.nextFloat();
		g.setColor(new Color(red, green, blue));

		int upLeftCornerX, upLeftCornerY;

		// Circle
		if (currentShapeIndex == 0) {
			upLeftCornerX = currX - (RECT_WIDTH / 2);
			upLeftCornerY = currY - (RECT_HEIGHT / 2);
			g.drawRect(upLeftCornerX, upLeftCornerY, RECT_WIDTH, RECT_HEIGHT);
		}

		// Filled circle
		if (currentShapeIndex == 1) {
			upLeftCornerX = currX - (RECT_WIDTH / 2);
			upLeftCornerY = currY - (RECT_HEIGHT / 2);
			g.fillRect(upLeftCornerX, upLeftCornerY, RECT_WIDTH, RECT_HEIGHT);
		}

		// Rectangle
		if (currentShapeIndex == 2) {
			upLeftCornerX = currX - CIRCLE_RADIUS;
			upLeftCornerY = currY - CIRCLE_RADIUS;
			g.drawOval(upLeftCornerX, upLeftCornerY, CIRCLE_RADIUS * 2, CIRCLE_RADIUS * 2);
		}

		// Filled rectangle
		if (currentShapeIndex == 3) {
			upLeftCornerX = currX - CIRCLE_RADIUS;
			upLeftCornerY = currY - CIRCLE_RADIUS;
			g.fillOval(upLeftCornerX, upLeftCornerY, CIRCLE_RADIUS * 2, CIRCLE_RADIUS * 2);
		}
	}

	// When a mouse click is completed (i.e. mouse released) collect the coordinate
	// and redraw.
	public void mouseReleased(MouseEvent event) {
		// Capture pixel coordinates of mouse event
		currX = event.getX();
		currY = event.getY();

		repaint(); // Force call to paintComponent to redraw
	}

	// These methods are mandatory to include with the given interface.
	// No specific action is necessary for this solution.
	public void mouseClicked(MouseEvent e) {
	}

	public void mousePressed(MouseEvent e) {
	}

	public void mouseEntered(MouseEvent e) {
	}

	public void mouseExited(MouseEvent e) {
	}

}